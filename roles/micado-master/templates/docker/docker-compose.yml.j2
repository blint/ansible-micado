version: '3.3'

services:

   dashboard:
     image: {{docker_images.dashboard}}
     container_name: micado-dashboard
     environment:
      MICADO_FRONTEND_IP: {{ ansible_default_ipv4.address }}

   redis:
    image: {{docker_images.redis}}
    container_name: occopus_redis
    restart: always
    volumes:
      - "/var/lib/micado/redis/data/:/data/"
      - "/var/log/micado/redis/:/tmp/"
    command: redis-server --appendonly yes --logfile /tmp/redis-server.log

   occopus:
    image: {{docker_images.occopus}}
    container_name: occopus
    depends_on:
      - redis
    volumes:
      - "/var/lib/micado/occopus/data/:/var/lib/micado/occopus/data/"
      - "/var/lib/micado/toscasubmitter/src/files/output_configs/:/var/lib/micado/occopus/submitter/"
      - "/var/log/micado/occopus/:/var/log/occopus/"
    environment:
      - REDIS_NAME=redis
      - LOG_DIR=/var/log/occopus
    command: occopus-rest-service --auth_data_path /var/lib/micado/occopus/data/auth_data.yaml --host 0.0.0.0 --parallelize

   consul:
    image: {{docker_images.consul}}
    container_name: consul
    restart: always
    ports:
      - 8300:8300
      - 8301:8301
      - 8301:8301/udp
      - 8302:8302
      - 8302:8302/udp
      - 8600:8600
      - 8600:8600/udp
    volumes:
      - "/var/lib/micado/consul/config/:/consul/config/"
      - "/var/lib/micado/consul/data/:/consul/data/"
    command: agent -server -client=0.0.0.0 -advertise={{ ansible_default_ipv4.address }} -bootstrap=true -ui

   prometheus:
    image: {{docker_images.prometheus}}
    container_name: prometheus
    restart: always
    depends_on:
      - consul
    volumes:
      - "/var/lib/micado/prometheus/config/:/etc/prometheus/"
      #- "/var/lib/micado/prometheus/data/:/prometheus/"
    command: '--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/usr/share/prometheus/console_libraries --web.console.templates=/usr/share/prometheus/consoles --web.enable-lifecycle --web.external-url="http://prometheus/prometheus/" --web.route-prefix="/prometheus"'

   alertmanager:
    image: {{docker_images.alertmanager}}
    container_name: alertmanager
    depends_on:
      - prometheus
    volumes:
      - "/var/lib/micado/alertmanager/config/:/etc/alertmanager/"
      - "/var/lib/micado/alertmanager/data/:/alertmanager/"

   policykeeper:
    image: {{docker_images.policykeeper}}
    container_name: policykeeper
    depends_on:
      - occopus
      - prometheus
    volumes:
      - "/var/lib/micado/policykeeper/src/:/policykeeper/"
      - "/var/lib/micado/policykeeper/config/:/config/policykeeper"
      - "/var/lib/micado/prometheus/config/:/config/prometheus"
      - "/var/log/micado/policykeeper/:/var/log/policykeeper/"
    command: /policykeeper/policy_keeper.py --srv --cfg /config/policykeeper/policykeeper_config.yaml --host 0.0.0.0 --port 12345

   dockervisualizer:
    image: {{docker_images.dockervisualizer}}
    container_name: dockervisualizer
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - CTX_ROOT=/docker-visualizer
    command: npm start

   grafana:
    image: {{docker_images.grafana}}
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: {{grafana_admin_pwd}}
      GF_LOG_MODE: "console file"
    volumes:
      - "/var/lib/micado/grafana/config/grafana.ini:/etc/grafana/grafana.ini"
      - "/var/lib/micado/grafana/data:/var/lib/grafana"
      - "/var/lib/micado/grafana/provisioning:/etc/grafana/provisioning"
      - "/var/log/micado/grafana/:/var/log/grafana"
    user: "root"

   toscasubmitter:
    image: {{docker_images.toscasubmitter}}
    container_name: toscasubmitter
    command: "-h 0.0.0.0 -p 5050"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/lib/micado/toscasubmitter/src:/var/lib/submitter"
      - "/var/lib/micado/toscasubmitter/system/:/var/lib/submitter/system"
      - "/var/log/micado/toscasubmitter/:/var/log/submitter/"
    user: "root"

   zorp:
    image: balasys/zorpgpl:latest
    container_name: zorp
    restart: always
    depends_on:
      - alertmanager
      - prometheus
      - grafana
      - dockervisualizer
      - consul
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/lib/micado/zorp/config/:/etc/zorp/"
      - "/var/lib/micado/zorp/scripts/:/app/"
